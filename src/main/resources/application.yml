##
# application.yml
# 공용 설정 파일
##

# log4j2 프로필별 설정 로드
logging:
    config: classpath:config/log4j2/log4j2-${PROFILE}.yml
    level:
        org.hibernate.SQL: debug
        org.hibernate.type.descriptor.sql: trace

server:
    error:
        path: /error
        whitelabel:
            enabled: false
    servlet:
        context-path: /
        encoding:
            charset: UTF-8
            enabled: true
            force: true
        session:
            timeout: 1h

spring:
    application:
        name: dreamdiary

    main:
        allow-bean-definition-overriding: true

    servlet:
        multipart:
            enabled: true
            location: ${FILE_UPLOAD_LOCATION}
            max-file-size: 500MB
            max-request-size: 500MB

    mvc:
        throw-exception-if-no-handler-found: true

    freemarker:
        template-loader-path: file:templates/
        suffix: .ftlh
        content-type: text/html; charset=utf-8
        request-context-attribute: rc
        expose-request-attributes: true
        expose-session-attributes: true
        cache: ${FREEMARKER_CACHE:true}

    mustache:
        check-template-location: false

    datasource:
        primary:
            driver-class-name: com.p6spy.engine.spy.P6SpyDriver
            jdbc-url: ${JDBC_P6SPY_URL}
            username: ${JDBC_USERNAME}
            password: ${JDBC_PASSWORD}

    jpa:
        show-sql: false      # Spring Boot에서 SQL 출력 여부 설정 (p6spy 사용 시 false)
        hibernate:
            ddl-auto: none
        properties:
            hibernate:
                format_sql: false  # ✅ SQL을 보기 좋게 포맷
                show_sql: false     # Hibernate에서 기본 SQL 출력 비활성화 (p6spy 사용)
                generate-ddl: true
                jdbc:
                    batch_size: 1000
                    batch_versioned_data: true
                    order_inserts: true
                    order_updates: true
                type:
                    descriptor:
                        sql: trace
                legacy_limit_handler: true
                default_batch_fetch_size: 1000
                enable_lazy_load_no_trans: true
        open-in-view: true

    flyway:
        url: ${JDBC_URL}
        user: ${JDBC_USERNAME}
        password: ${JDBC_PASSWORD}
        schemas: ${JDBC_SCHEMA}
        baseline-on-migrate: true  # 기존 스키마가 있어도 마이그레이션 실행
        baseline-version: 0.12.0   # 0.12.0 이전의 마이그레이션은 실행하지 않음
        validate-on-migrate: true  # 이전 SQL과 충돌 방지
        locations: classpath:schema/migration/{vendor}  # 현재 DB에 맞는 경로 자동 설정

    jackson:
        date-format: yyyy-MM-dd HH:mm:ss
        time-zone: Asia/Seoul
        serialization:
            fail-on-empty-beans: false

    messages:
        basename: messages/messages
        encoding: UTF-8
        use-code-as-default-message: true
        fallback-to-system-locale: true

    mail:
        default-encoding: UTF-8
        host: ${MAIL_HOST}
        username: ${MAIL_USERNAME}
        password: ${MAIL_PASSWORD}
        port: ${MAIL_PORT}
        protocol: ${MAIL_PROTOCOL}
        test-connection: false
        properties:
            mail:
                smtp:
                    auth: true
                    starttls:
                        enabled: true
                    ssl:
                        trust: smtp.gmail.com

    jwt:
        secret: ${JWT_SECRET}

    security:
        oauth2:
            client:
                registration:
                    google:
                        client-id: ${GOOGLE_CLIENT_ID}
                        client-secret: ${GOOGLE_CLIENT_SECRET}
                        scope:
                            - email
                            - profile
                        redirect-uri: "{baseUrl}/login/oauth2/code/google"
                        authorization-grant-type: authorization_code
                        client-name: Google
                    naver:
                        client-id: ${NAVER_CLIENT_ID}
                        client-secret: ${NAVER_CLIENT_SECRET}
                        scope:
                            - email
                        redirect-uri: "{baseUrl}/login/oauth2/code/naver"
                        authorization-grant-type: authorization_code
                        client-name: Naver
                provider:
                    google:
                        authorization-uri: https://accounts.google.com/o/oauth2/auth
                        token-uri: https://oauth2.googleapis.com/token
                        user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
                    naver:
                        authorization-uri: https://nid.naver.com/oauth2.0/authorize
                        token-uri: https://nid.naver.com/oauth2.0/token
                        user-info-uri: https://openapi.naver.com/v1/nid/me
                        user-name-attribute: response

#OpenAPI Swagger config
springdoc:
    paths-to-match:
        - /api/**
    default-produces-media-type: application/json
    show-actuator: true
    cache:
        disabled: true

    swagger-ui:
        path: /api-docs.html
        disable-swagger-default-url: true
        display-request-duration: true
        operations-sorter: alpha
        tags-sorter: alpha

    api-docs:
        path: /api-docs
        #groups:
        #    enabled: true

system:
    init-temp-pw: ${SYSTEM_INIT_TEMP_PW}

#AES128 secret key; 16 chars
aes128:
    secret-key: ${AES128_SECRET_KEY}

#key used for remember-me library
remember-me:
    param: ${REMEMBER_ME_PARAM}
    key: ${REMEMBER_ME_KEY}

api:
    kasi:
        serviceKey: ${API_KASI_SERVICE_KEY}
        api-url: ${API_KASI_URL}