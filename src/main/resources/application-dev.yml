#application-dev.yml
#개발(dev) 프로필용 설정 파일

#개발 포트=18081
server:
    port: ${SERVER_PORT:18081}

logging:
    config: classpath:config/log4j2/log4j2-dev.yml

spring:
    servlet:
        multipart:
            location: ${FILE_UPLOAD_LOCATION}

    freemarker:
        cache: ${FREEMARKER_CACHE:true}

    datasource:
        primary:
            driver-class-name: org.mariadb.jdbc.Driver
            jdbc-url: ${JDBC_URL}
            username: ${JDBC_USERNAME}
            password: ${JDBC_PASSWORD}

    jpa:
        database: mysql
        database-platform: org.hibernate.dialect.MariaDBDialect
        show-sql: true
        hibernate:
            ddl-auto: none
        properties:
            hibernate:
                dialect: org.hibernate.dialect.MariaDBDialect
                generate-ddl: true
                format_sql: true
                use_sql_comments: true

    sql:
        init:
            # mode: always / embedded / never
            mode: never
            platform: mariadb
            continue-on-error: true

    flyway:
        url: ${JDBC_URL}
        user: ${JDBC_USERNAME}
        password: ${JDBC_PASSWORD}
        schemas: ${JDBC_SCHEMA:dreamdiary-dev}
        baseline-on-migrate: true  # 기존 스키마가 있어도 마이그레이션 실행
        baseline-version: 0.12.0   # 0.12.0 이전의 마이그레이션은 실행하지 않음
        validate-on-migrate: true  # 이전 SQL과 충돌 방지
        locations: classpath:schema/migration/{vendor}  # 현재 DB에 맞는 경로 자동 설정

    redis:
        host: ${REDIS_HOST}
        port: ${REDIS_PORT}
        password: ${REDIS_PASSWORD}

    kafka:
        bootstrap-servers: ${KAFKA_HOST}:${KAFKA_PORT}
        consumer:
            group-id: dreamdiary
            auto-offset-reset: earliest
            key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
            value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        producer:
            key-serializer: org.apache.kafka.common.serialization.StringSerializer
            value-serializer: org.apache.kafka.common.serialization.StringSerializer

    elasticsearch:
        username: ${ELASTIC_USERNAME}
        password: ${ELASTIC_PASSWORD}
        uris: ${ELASTIC_URIS}

api:
    jandi:
        teamId: ${JANDI_TEAM_ID}
        topics:
            - name: NOTICE
              id:  ${JANDI_TOPIC_NOTICE}
            - name: SCHDUL
              id: ${JANDI_TOPIC_SCHDUL}
            - name: TEST
              id: ${TEST}