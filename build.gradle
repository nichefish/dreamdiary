/**
 * build.gradle
 * Gradle 빌드 관련 설정 및 스크립트 (Groovy)
 *
 * @author nichefish
 */

/**
 * 플러그인 설정
 */
plugins {
    id 'java'
    id 'idea'
    id 'jacoco'
    id 'org.springframework.boot' version '2.7.18'
    id 'io.spring.dependency-management' version '1.1.4'
    id "org.flywaydb.flyway" version "11.2.0"
    id 'com.github.node-gradle.node' version "3.5.1"
}

/**
 * 프로젝트 정보
 */
group = 'dreamdiary.io'
version = '0.12.0'

/**
 * Java, Spring Boot 및 추가 설정
 */
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}
springBoot {
    buildInfo()
}
jacoco {
    toolVersion = "0.8.11"
}
node {
    version = '20.11.1'
    npmVersion = '10.5.0'
    download = true
}

/**
 * 컴파일 대상 소스 코드 및 리소스 디렉토리를 명시적으로 지정
 * QueryDSL의 QClass 및 AnnotationProcessor로 생성된 클래스를 명시적으로 포함한다. (ex. Lombok, Mapstruct...)
 */
sourceSets {
	main {
        java {
            srcDirs = ["$projectDir/src/main/java", "$buildDir/generated/sources/annotationProcessor/java/main", "$buildDir/generated/querydsl"]
        }
		resources {
            srcDirs = ["$projectDir/src/main/resources"]
		}
	}
}

/**
 * 의존성 관리 설정
 * ???
 */
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom implementation, compileClasspath
    configureEach {
        /* log4j2 적용 위해 SpringBoot 기본 로깅 툴인 logback 배제 */
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'

        resolutionStrategy {
            eachDependency { DependencyResolveDetails details ->
                /* log4j2 보안 문제로 인해 기본제공버전 대신 최신버전 적용 */
                if (details.requested.group == 'org.apache.logging.log4j') {
                    details.useVersion '2.17.1'
                }
                if (details.requested.group == 'com.querydsl' && details.requested.name == 'querydsl-codegen') {
                    details.useVersion '4.4.0'
                }
                if (details.requested.group == 'com.querydsl' && details.requested.name == 'querydsl-core') {
                    details.useVersion '4.4.0'
                }
            }
        }
    }
}

/**
 * Maven Central Repository 설정 (라이브러리 다운로드 위치)
 */
repositories {
    mavenCentral()      // 공식 Maven 저장소
    jcenter()           // ??
}

/**
 * 의존성 관련 정보를 dependencies.gradle 파일로 분리하여 관리한다.
 */
apply from: "$rootDir/gradle/dependencies.gradle"

/**
 * executable jar 생성시 MainClass 강제 주입
 */
tasks.bootJar {
    mainClass = 'io.nicheblog.dreamdiary.DreamdiaryApplication'
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}
tasks.named('compileJava') {
    dependsOn tasks.named('bootBuildInfo')
}
tasks.withType(JavaCompile).configureEach {
    // 인코딩 설정
    options.encoding = 'UTF-8'
    // lombok이 querydsl보다 먼저 처리되도록 설정
    options.annotationProcessorPath = configurations.annotationProcessor
    options.compilerArgs -= ["-proc:none"] // `doFirst` 없이 바로 적용 가능
}

tasks.register('buildFrontend', NpmTask) {
    dependsOn npmInstall
    args = ['run', 'build']
}
tasks.register('copyFrontendToStatic', Copy) {
    dependsOn buildFrontend
    from 'dist'
    into 'src/main/resources/static'
}

/**
 * 테스트 관련 정보를 testconfig.gradle 파일로 분리하여 관리한다.
 */
apply from: "$rootDir/gradle/testconfig.gradle"